자바 프로그래밍 정리 노트[2022.01.06] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 자바 프로그래밍 (Java Programming)
   ◾ 프로그래밍 (Programming) - 컴퓨터 프로그램 만드는 일
   ◾ 프로그래머 (Programmer) - 컴퓨터 프로그램 만드는 사람
   ◾ 프로그램 (Program) - 컴퓨터에게 일을 시키는 명령의 집합
   ◾ 컴파일 (Compile) - 컴퓨터가 이해할 수 있는 언어로 번역
   ◾ 컴파일러 (Compiler) - 컴파일 작업을 하는 프로그램

📌 자바 : 1991년 제임스 고슬링을 비롯한 선 마이크로시스템 연구원들이 처음 개발함

📌 자바 (Java) 장점
   1. 플랫폼에 영향 받지 않아 다양한 환경에서 사용가능 - '한 번 작성하면 어디서든 돌아간다'
   2. 객체 지향 언어로 유지보수 쉽고 확장성이 좋음
   3. 프로그램이 안정적이고 풍부한 기능을 제공하는 오픈 소스임 - 메모리를 효율적으로 관리

📌 자바 개발 환경
   ◾ 자바 가상 머신(JVM, Java Virtual Machine) : 자바 프로그램 실행 환경을 만들어 주는 SW
   ◾ 자바 실행 환경(JRE, Java Runtime Environment) : 현재 운영체제에서 자바를 구동할 수 있도록 함
   ◾ 자바 개발 도구(JDK, Java Development Kit) : 자바 가상 머신과 컴파일러, 디버거 등 도구들이 포함됨
   ◾ 통합 개발 환경(IDE) : 이클립스를 사용하며 코드 작성, 저장, 컴파일 및 디버깅을 도와줌

📌 변수 : 변하는 수, 저장할 공간의 이름, 컴퓨터 내부의 메모리 공간에 저장됨
   1. 변수 이름은 영문자나 숫자를 사용할 수 있고 특수 문자 중에 $, _만 사용가능
   2. 변수 이름은 숫자로 시작할 수 없음
   3. 자바에서 이미 사용중이 예약어는 사용할 수 없음 	ex) while, int, break 등

   ◾ 변수 이름은 소문자로 시작, 만약 여러 단어로 변수 이름을 만들 경우 중간에 다른 뜻의 단어가 등장할 때 첫 글자 대문자로 사용

📌 메모리 : 프로그램이 실행되는 작업 공
   ◾ 변수를 선언한다 : 선언한 변수 이름으로 어떤 위치에 있는 메모리를 얼마만큼의 크기로 사용하겠다고 한 것

📌 기본 자료형
   ◾ 정수 자료형 : 양수, 음수, 0 을 나타내는데 사용하는 자료형
	byte	(1바이트)
	short	(2바이트)
	int	(4바이트)
	long	(8바이트)
   ◾ 문자 자료형 : 문자를 변수에 대입하면 그 문자에 해당하는 정수 값(아스키 코드값)이 저장됨
	char	(2바이트)
   ◾ 실수 자료형 : 실수를 부동 소수점 방식으로 표현
	float	(4바이트)
	double	(8바이트)
   ◾ 논리 자료형 : 어떤 변수의 참, 거짓의 값을 나타냄
	boolean	(1바이트)

📌 자료형 없이 변수 선언
   ◾ 지역 변수 자료형 추론 : 자료형을 쓰지 않고도 변수를 사용, var를 사용

📌 상수(constant) : 항상 변하지 않는 값
   ◾ final 예약어

📌 리터럴(literal) : 프로그램에서 사용하는 모든 숫자, 문자, 논리값을 일컫는 말

📌 형 변환 : 각 변수의 자료형이 다를 때 자료형을 같게 바꾸는 것, 묵시적 형 변환 (자동 형 변환), 명시적 형 변환 (강제 형 변환)
   ◾ 형 변환 기본 원칙
      1) 바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어짐
      2) 덜 정밀한 자료형에서 더 정밀한 자료형으로 형 변환은 자동으로 이루어짐

   ◾ 묵시적 형 변환 (자동 형 변환)
      1) 바이트 크기가 작은 자료형에서 큰 자료형으로 대입 - 자료 손실 없이 모두 저장됨
      2) 덜 정밀한 자료형에서 더 정밀한 자료형으로 대입 - 두 크기가 같은 변수임에더 불구하고 int형 보다 float형이 더 정밀하게 데이터 표현할 수 있어 실수형 float으로 자동 형 변환이 일어남 
      3) 연산 중에 자동 변환 - 바이트 크기가 작은 수에서 큰 수로, 덜 정밀한 수에서 더 정밀한 수로 자료형이 변환되는 경우에 자동 형 변환이 일어남
	   
   ◾ 명시적 형 변환 (강제 형 변환) : 프로그래머가 변환할 자료형을 명시적으로 써 주어야함.
      1) 바이트 크기가 큰 자료형에서 작은 자료형으로 대입 - byte형이 표현할 수 있는 범위를 넘는 경우 자료 손실이 발생
      2) 더 정밀한 자료형에서 덜 정밀한 자료형으로 대입 - 실수 자료형에서 정수 자료형으로 값이 대입되는 경우 실수의 소수점 이하 부분이 생략됨
      3) 연산 중에 형 변환 - 두 실수의 자료형이 다르지만 float형이 double형으로 변환되는 묵시적 형 변환이 일어나면서 두 수가 더해진 값이 나온 후 int형으로 명시적 형 변환이 일어남

📌 기본 연산자
   ◾ 연산자 (operator) - 연산에 사용하는 기호
   ◾ 항 (operand) - 연산에 사용하는 값
   ◾ 단항 연산자 : 항이 한 개인 연산자			ex) ++num
   ◾ 이항 연산자 : 항이 두 개인 사칙 연산		ex) num1 + num2;
   ◾ 삼항 연산자 : 항이 세 개인 연산자 (조건 연산자)	ex) (5>3) ? 1 : 0;

   ◾ 대입 연산자 : 변수에 값을 대입하는 연산자, 하나의 문장에 여러 연산자가 있을 때 모든 연산을 다 끝낸 후 마지막에 연산 결과를 변수에 대입
	왼쪽 변수 = 오른쪽 변수(또는 식)

   ◾ 부호 연산자 : 더하기(+), 빼기(-) 연산에 쓰는 이항 연산자이면서 부호를 나타내는 단항 연산자
	+	(변수나 상수 값을 양수로 만듬) 
	–	(변수나 상수 값을 음수로 만듬)

   ◾ 산술 연산자 : 사칙 연산에서 사용하는 연산자, 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/), 나머지(%)
	+
	–
	*
	/	(앞에 있는 항에서 뒤에 있는 항을 나누고 몫을 구함)
	%	(앞에 있는 항에서 뒤에 있는 항을 나누고 나머지를 구함)

   ◾ 증감•감소 연산자 : 단항 연산자로 연산자 앞이나 뒤에 사용하며 값을 1만큼 늘리거나 1만큼 줄임
	++ 연산자 : 항의 값에 1을 더함
	   val = ++num : 1 더한 후 val 변수에 대입 
	   val = num++ : val 변수에 num 대입한 후 1 더함
	-- 연산자 : 항의 값에 1을 뺌
	   val = --num : 1 뺀 후 val 변수에 대입 
	   val = num-- : val 변수에 num 대입한 후 1 뺌

   ◾ 관계 연산자 : 항이 두 개인 이항 연산자, 두 개의 항 중 어느 것이 더 큰지, 작은지, 같은지 등의 여부를 검사, 결과 값은 참(true) 또는 거짓(false)으로 반환
	>
	<
	>=
	<=
	==	(두 개 항의 값이 같으면 참, 아니면 거짓을 반환)
	!=	(두 개 항이 다르면 참, 아니면 거짓을 반환)

   ◾ 논리 연산자 : 두 명제가 모두 참이면 논리 곱은 참, 두명제 중 하나만 참이면 논리 합은 참, 참의 부정은 거짓, 거짓의 부정은 참, 관계 연산자가 논리 연산자보다 연산자 우선순위가 높음
	&& (논리 곱)	(두 항이 모두 참인 경우에만 결과 값이 참, 그렇지 않은 경우 거짓)
	|| (논리 합)	(두 항 중 하나의 항만 참이면 결과 값은 참, 두 항이 모두 거짓이면 결과 값은 거짓)
	! (부정)		(단항 연산자, 참인 경우는 거짓으로 바꾸고, 거짓인 경우 참으로 바꿈)

   ◾ 복합 대입 연산자 : 대입 연산자와 다른 연산자를 조합해 하나의 연산자처럼 사용하는 연산자, 우선순위가 가장낮은 연산자
	+= 	(두 항의 값을 더해서 왼쪽 항에 대입)
	-=	(왼쪽 항에서 오른쪽 항을 빼서 그 값을 왼쪽 항에 대입)
	*=	(두 항의 값을 곱해서 왼쪽 항에 대입)
	/=	(왼쪽 항을 오른쪽 항으로 나누어 그 몫을 왼쪽 항에 대입)
	%=	(왼쪽 항을 오른쪽 항으로 나누어 그 나머지를 왼쪽 항에 대입)
	<<=	(비트를 왼쪽으로 이동, 그 값을 왼쪽 항에 대입)
	>>=	(비트를 오른쪽으로 이동, 그 값을 왼쪽 항에 대입 (왼쪽 = 오른쪽, 부호 비트 동일))
	>>>=	(비트를 오른쪽으로 이동, 그 값을 왼쪽 항에 대입 (왼쪽에 채워지는 비트 값 0))
	&=	(두 항의 & 비트 연산 후 그 값을 왼쪽 항에 대입)
	|=	(두 항의 | 비트 연산 후 그 값을 왼쪽 항에 대입)
	^=	(두 항의 ^ 비트 연산 후 그 값을 왼쪽 항에 대입)

   ◾ 조건 연산자 : 연산에 필요한 항의 개수가 세 개, 삼항 연산자, 조건 연산은 주어진 조건식이 참인 경우와 거짓인 경우에 다른 결과 값이 나옴
	조건식? 결과1 : 결과2;

📌 비트 연산자 : 비트 단위로 연산이 이루어지는 연산자
   ◾ 비트 논리 연산자
	1) & (AND) 연산자	(두개의 비트 값이 모두 1인 경우에만 연산의 결과 값이 1이 됨)
	2) | (OR) 연산자	(비트 값이 하나라도 1이면 연산 결과 값이 1이 됨)
	3) ^ (XOR) 연산자	(같은 값이면 0, 다른 값이면 1이 됨)
	4) ~ (반전) 연산자	(비트 값을 (0→1, 1→0)으로 바꾸는 연산자)

   ◾ 비트 이동 연산자 ( = 시프트(shift) 연산자)
	1) << 연산자	(왼쪽으로 비트를 이동하는 연산자)
	2) >> 연산자	(오른쪽으로 비트를 이동하는 연산자)
	3) >>> 연산자	(오른쪽으로 비트를 이동하는 연산자)

   ◾ 연산자 우선순위
	1순위 : 일차식 	(), [] . 			연산방향 : →
	2순위 : 다항 	!, ++, --, +, -  		연산방향 : ←
	3순위 : 산술 	%, / 			연산방향 : →
	4순위 : 산술 	+, - 			연산방향 : →
	5순위 : 비트이동 	<<, >> 			연산방향 : →
	6순위 : 관계 	<, >, <=, >= 		연산방향 : →
	7순위 : 관계 	==, != 			연산방향 : →
	8순위 : 비트 곱 	& 			연산방향 : →
	9순위 : 비트 차 	^ 			연산방향 : →
	10순위 : 비트 합 	 |			연산방향 : →
	11순위 : 논리 곱 	&&			연산방향 : →
	12순위 : 논리 합 	||			연산방향 : →
	13순위 : 조건	?, :			연산방향 : →
	14순위 : 대입 	=, +=, -=, *=, %=, /=	연산방향 : ←

자바 프로그래밍 정리 노트[2022.01.06] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
