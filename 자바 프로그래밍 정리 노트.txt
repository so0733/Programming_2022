자바 프로그래밍 정리 노트[2022.01.06] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 자바 프로그래밍 (Java Programming)
   ◾ 프로그래밍 (Programming) - 컴퓨터 프로그램 만드는 일
   ◾ 프로그래머 (Programmer) - 컴퓨터 프로그램 만드는 사람
   ◾ 프로그램 (Program) - 컴퓨터에게 일을 시키는 명령의 집합
   ◾ 컴파일 (Compile) - 컴퓨터가 이해할 수 있는 언어로 번역
   ◾ 컴파일러 (Compiler) - 컴파일 작업을 하는 프로그램

📌 자바 : 1991년 제임스 고슬링을 비롯한 선 마이크로시스템 연구원들이 처음 개발함

📌 자바 (Java) 장점
   1. 플랫폼에 영향 받지 않아 다양한 환경에서 사용가능 - '한 번 작성하면 어디서든 돌아간다'
   2. 객체 지향 언어로 유지보수 쉽고 확장성이 좋음
   3. 프로그램이 안정적이고 풍부한 기능을 제공하는 오픈 소스임 - 메모리를 효율적으로 관리

📌 자바 개발 환경
   ◾ 자바 가상 머신(JVM, Java Virtual Machine) : 자바 프로그램 실행 환경을 만들어 주는 SW
   ◾ 자바 실행 환경(JRE, Java Runtime Environment) : 현재 운영체제에서 자바를 구동할 수 있도록 함
   ◾ 자바 개발 도구(JDK, Java Development Kit) : 자바 가상 머신과 컴파일러, 디버거 등 도구들이 포함됨
   ◾ 통합 개발 환경(IDE) : 이클립스를 사용하며 코드 작성, 저장, 컴파일 및 디버깅을 도와줌

📌 변수 : 변하는 수, 저장할 공간의 이름, 컴퓨터 내부의 메모리 공간에 저장됨
   1. 변수 이름은 영문자나 숫자를 사용할 수 있고 특수 문자 중에 $, _만 사용가능
   2. 변수 이름은 숫자로 시작할 수 없음
   3. 자바에서 이미 사용중이 예약어는 사용할 수 없음 	ex) while, int, break 등

   ◾ 변수 이름은 소문자로 시작, 만약 여러 단어로 변수 이름을 만들 경우 중간에 다른 뜻의 단어가 등장할 때 첫 글자 대문자로 사용

📌 메모리 : 프로그램이 실행되는 작업 공
   ◾ 변수를 선언한다 : 선언한 변수 이름으로 어떤 위치에 있는 메모리를 얼마만큼의 크기로 사용하겠다고 한 것

📌 기본 자료형
   ◾ 정수 자료형 : 양수, 음수, 0 을 나타내는데 사용하는 자료형
	byte	(1바이트)
	short	(2바이트)
	int	(4바이트)
	long	(8바이트)
   ◾ 문자 자료형 : 문자를 변수에 대입하면 그 문자에 해당하는 정수 값(아스키 코드값)이 저장됨
	char	(2바이트)
   ◾ 실수 자료형 : 실수를 부동 소수점 방식으로 표현
	float	(4바이트)
	double	(8바이트)
   ◾ 논리 자료형 : 어떤 변수의 참, 거짓의 값을 나타냄
	boolean	(1바이트)

📌 자료형 없이 변수 선언
   ◾ 지역 변수 자료형 추론 : 자료형을 쓰지 않고도 변수를 사용, var를 사용

📌 상수(constant) : 항상 변하지 않는 값
   ◾ final 예약어

📌 리터럴(literal) : 프로그램에서 사용하는 모든 숫자, 문자, 논리값을 일컫는 말

📌 형 변환 : 각 변수의 자료형이 다를 때 자료형을 같게 바꾸는 것, 묵시적 형 변환 (자동 형 변환), 명시적 형 변환 (강제 형 변환)
   ◾ 형 변환 기본 원칙
      1) 바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어짐
      2) 덜 정밀한 자료형에서 더 정밀한 자료형으로 형 변환은 자동으로 이루어짐

   ◾ 묵시적 형 변환 (자동 형 변환)
      1) 바이트 크기가 작은 자료형에서 큰 자료형으로 대입 - 자료 손실 없이 모두 저장됨
      2) 덜 정밀한 자료형에서 더 정밀한 자료형으로 대입 - 두 크기가 같은 변수임에더 불구하고 int형 보다 float형이 더 정밀하게 데이터 표현할 수 있어 실수형 float으로 자동 형 변환이 일어남 
      3) 연산 중에 자동 변환 - 바이트 크기가 작은 수에서 큰 수로, 덜 정밀한 수에서 더 정밀한 수로 자료형이 변환되는 경우에 자동 형 변환이 일어남
	   
   ◾ 명시적 형 변환 (강제 형 변환) : 프로그래머가 변환할 자료형을 명시적으로 써 주어야함.
      1) 바이트 크기가 큰 자료형에서 작은 자료형으로 대입 - byte형이 표현할 수 있는 범위를 넘는 경우 자료 손실이 발생
      2) 더 정밀한 자료형에서 덜 정밀한 자료형으로 대입 - 실수 자료형에서 정수 자료형으로 값이 대입되는 경우 실수의 소수점 이하 부분이 생략됨
      3) 연산 중에 형 변환 - 두 실수의 자료형이 다르지만 float형이 double형으로 변환되는 묵시적 형 변환이 일어나면서 두 수가 더해진 값이 나온 후 int형으로 명시적 형 변환이 일어남

📌 기본 연산자
   ◾ 연산자 (operator) - 연산에 사용하는 기호
   ◾ 항 (operand) - 연산에 사용하는 값
   ◾ 단항 연산자 : 항이 한 개인 연산자			ex) ++num
   ◾ 이항 연산자 : 항이 두 개인 사칙 연산		ex) num1 + num2;
   ◾ 삼항 연산자 : 항이 세 개인 연산자 (조건 연산자)	ex) (5>3) ? 1 : 0;

   ◾ 대입 연산자 : 변수에 값을 대입하는 연산자, 하나의 문장에 여러 연산자가 있을 때 모든 연산을 다 끝낸 후 마지막에 연산 결과를 변수에 대입
	왼쪽 변수 = 오른쪽 변수(또는 식)

   ◾ 부호 연산자 : 더하기(+), 빼기(-) 연산에 쓰는 이항 연산자이면서 부호를 나타내는 단항 연산자
	+	(변수나 상수 값을 양수로 만듬) 
	–	(변수나 상수 값을 음수로 만듬)

   ◾ 산술 연산자 : 사칙 연산에서 사용하는 연산자, 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/), 나머지(%)
	+
	–
	*
	/	(앞에 있는 항에서 뒤에 있는 항을 나누고 몫을 구함)
	%	(앞에 있는 항에서 뒤에 있는 항을 나누고 나머지를 구함)

   ◾ 증감•감소 연산자 : 단항 연산자로 연산자 앞이나 뒤에 사용하며 값을 1만큼 늘리거나 1만큼 줄임
	++ 연산자 : 항의 값에 1을 더함
	   val = ++num : 1 더한 후 val 변수에 대입 
	   val = num++ : val 변수에 num 대입한 후 1 더함
	-- 연산자 : 항의 값에 1을 뺌
	   val = --num : 1 뺀 후 val 변수에 대입 
	   val = num-- : val 변수에 num 대입한 후 1 뺌

   ◾ 관계 연산자 : 항이 두 개인 이항 연산자, 두 개의 항 중 어느 것이 더 큰지, 작은지, 같은지 등의 여부를 검사, 결과 값은 참(true) 또는 거짓(false)으로 반환
	>
	<
	>=
	<=
	==	(두 개 항의 값이 같으면 참, 아니면 거짓을 반환)
	!=	(두 개 항이 다르면 참, 아니면 거짓을 반환)

   ◾ 논리 연산자 : 두 명제가 모두 참이면 논리 곱은 참, 두명제 중 하나만 참이면 논리 합은 참, 참의 부정은 거짓, 거짓의 부정은 참, 관계 연산자가 논리 연산자보다 연산자 우선순위가 높음
	&& (논리 곱)	(두 항이 모두 참인 경우에만 결과 값이 참, 그렇지 않은 경우 거짓)
	|| (논리 합)	(두 항 중 하나의 항만 참이면 결과 값은 참, 두 항이 모두 거짓이면 결과 값은 거짓)
	! (부정)		(단항 연산자, 참인 경우는 거짓으로 바꾸고, 거짓인 경우 참으로 바꿈)

   ◾ 복합 대입 연산자 : 대입 연산자와 다른 연산자를 조합해 하나의 연산자처럼 사용하는 연산자, 우선순위가 가장낮은 연산자
	+= 	(두 항의 값을 더해서 왼쪽 항에 대입)
	-=	(왼쪽 항에서 오른쪽 항을 빼서 그 값을 왼쪽 항에 대입)
	*=	(두 항의 값을 곱해서 왼쪽 항에 대입)
	/=	(왼쪽 항을 오른쪽 항으로 나누어 그 몫을 왼쪽 항에 대입)
	%=	(왼쪽 항을 오른쪽 항으로 나누어 그 나머지를 왼쪽 항에 대입)
	<<=	(비트를 왼쪽으로 이동, 그 값을 왼쪽 항에 대입)
	>>=	(비트를 오른쪽으로 이동, 그 값을 왼쪽 항에 대입 (왼쪽 = 오른쪽, 부호 비트 동일))
	>>>=	(비트를 오른쪽으로 이동, 그 값을 왼쪽 항에 대입 (왼쪽에 채워지는 비트 값 0))
	&=	(두 항의 & 비트 연산 후 그 값을 왼쪽 항에 대입)
	|=	(두 항의 | 비트 연산 후 그 값을 왼쪽 항에 대입)
	^=	(두 항의 ^ 비트 연산 후 그 값을 왼쪽 항에 대입)

   ◾ 조건 연산자 : 연산에 필요한 항의 개수가 세 개, 삼항 연산자, 조건 연산은 주어진 조건식이 참인 경우와 거짓인 경우에 다른 결과 값이 나옴
	조건식? 결과1 : 결과2;

📌 비트 연산자 : 비트 단위로 연산이 이루어지는 연산자
   ◾ 비트 논리 연산자
	1) & (AND) 연산자	(두개의 비트 값이 모두 1인 경우에만 연산의 결과 값이 1이 됨)
	2) | (OR) 연산자	(비트 값이 하나라도 1이면 연산 결과 값이 1이 됨)
	3) ^ (XOR) 연산자	(같은 값이면 0, 다른 값이면 1이 됨)
	4) ~ (반전) 연산자	(비트 값을 (0→1, 1→0)으로 바꾸는 연산자)

   ◾ 비트 이동 연산자 ( = 시프트(shift) 연산자)
	1) << 연산자	(왼쪽으로 비트를 이동하는 연산자)
	2) >> 연산자	(오른쪽으로 비트를 이동하는 연산자)
	3) >>> 연산자	(오른쪽으로 비트를 이동하는 연산자)

   ◾ 연산자 우선순위
	1순위 : 일차식 	(), [] . 			연산방향 : →
	2순위 : 다항 	!, ++, --, +, -  		연산방향 : ←
	3순위 : 산술 	%, / 			연산방향 : →
	4순위 : 산술 	+, - 			연산방향 : →
	5순위 : 비트이동 	<<, >> 			연산방향 : →
	6순위 : 관계 	<, >, <=, >= 		연산방향 : →
	7순위 : 관계 	==, != 			연산방향 : →
	8순위 : 비트 곱 	& 			연산방향 : →
	9순위 : 비트 차 	^ 			연산방향 : →
	10순위 : 비트 합 	 |			연산방향 : →
	11순위 : 논리 곱 	&&			연산방향 : →
	12순위 : 논리 합 	||			연산방향 : →
	13순위 : 조건	?, :			연산방향 : →
	14순위 : 대입 	=, +=, -=, *=, %=, /=	연산방향 : ←

자바 프로그래밍 정리 노트[2022.01.07] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 조건문 : 주어진 조건에 따라 다른 문장을 선택할 수 있도록 프로그래밍
   ◾ if문 : 주어진 조건식이 '참'일 경우에 중괄호 안에 있는 문장을 수행
	if (조건식) {
	   수행문;		// 조건식이 참일 경우에 문장 수행
          	}

   ◾ if - else문 : 조건식을 만족하는 경우와 만족하지 않는 경우를 모두 나타낼 때 사용
	if (조건식) {
	   수행문1;	// 조건식이 참일 경우에 문장 수행
	}
	else (조건식) {
	   수행문2;	// 조건식이 거짓일 경우에 문장 수행
	}

   ◾ if - else if - else문 : 하나의 상황에 조건이 여러 개인 경우
	if (조건식1) {
	   수행문1;	// 조건식1이 참일 경우에 문장 수행
	}
	else if (조건식2) {
	   수행문2;	// 조건식2가 참일 경우에 문장 수행
	}
	else if (조건식3) {
	   수행문3;	// 조건식3이 참일 경우에 문장 수행
	}
	else {
	   수행문4;	// 위의 조건이 모두 해당하지 않는 경우에 수행
	}
	수행문5;		// if - esle if - else문이 모두 끝난 후 수행

   ◾ if - else문 			   ◾ 조건 연산자
         if (a > b)
	max = a;		→	    max = (a > b) ? a : b;
         else
	max = b;

   ◾ switch - case문 : 조건이 하나의 변수 값이나 상수 값으로 구분되는 경우에 사용함
	switch (조건) {
	   case 값1 : 수행문1;	break;
	   case 값2 : 수행문2;	break;
	   case 값3 : 수행문3;	break;
	default : 수행문4;		// 주어진 값이 어떤 case에도 해당하지 않으면 수행함 -> if - else문의 else와 같은 동작
	}

📌 반복문 : 반복되는 일을 처리
   ◾ while문 : 조건식이 참인 동안 수행문을 반복 수행
	while (조건식) {
	   수행문1;	// 조건식이 참인 동안 반복 수행
	}
	   수행문2;

   ◾ do-while문 : { }안 문장을 무조건 한 번 수행한 후 조건식을 검사, 조건이 만족하는지 여부를 마지막에 검사
	do {
	   수행문1;
	} while (조건식);
	   수행문2;

   ◾ for문 : 변수의 초기화식, 조건식, 증감식을 이용해 반복 수행
	for ( 초기화식; 조건식; 증감식 ) {
	   수행문;
	}

   ◾ continue문 : 반복문을 수행하는데 특정 조건에서는 수행하지 않고 건너뛰어야 할 때 사용

   ◾ break문 : 수행문을 반복하지 않고 반복문을 빠져나옴

자바 프로그래밍 정리 노트[2022.01.10] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 객체 : 의사나 행위가 미치는 대상
   ◾ 객체 지향 프로그램 : 어떤 대상(객체)을 가지고 프로그래밍함
   ◾ 자바 객체 지향 프로그래밍 (OOP) : 객체를 기반으로 하는 프로그램

📌 절차 지향 프로그래밍 : 순서대로 일어나는 일을 시간순으로 프로그래밍 하는 것
   ◾ C언어

📌 객체 지향 프로그래밍 : 객체를 정의하고 객체 간 협력을 프로그래밍 하는 것
   ◾ 자바

📌 클래스 : 객체의 속성과 기능을 코드로 구현한 것 (클래스 이름은 대문자로 시작함)
   ◾ 멤버 변수 : 클래스 속성(특성이라고도 하고 클래스 내부에 변수로 선언)
	(접근 제어자) class 클래스 이름 {
	   멤버 변수;
	   메서드;
	}

📌 멤버 변수 : 클래스 내부에 선언하여 객체 속성을 나타내는 변수
   ◾ 변수의 자료형
	1) 기본 자료형 : int, long, float, double 등
	2) 참조 자료형 : String, Date, Student 등

📌 멤버 함수(메서드) : 클래스 내부에서 멤버 변수를 사용하여 클래스 기능을 구현한 것

📌 패키지 : 클래스 파일의 묶음

📌 함수 : 하나의 기능을 수행하는 일련의 코드, 어떤 기능을 수행하도록 미리 구현해 놓고 필요할 때 호출해 사용
   ◾ 이름이 있고 입력 값과 결과 값을 가짐
   ◾ 매개변수 : 함수의 입력으로 받는 변수
   ◾ 반환 값 : 함수를 수행한 후 결과로 되돌려 주는 값이 result

   ◾ 함수를 정의한다 : 함수가 하는 일을 코드로 구현
   ◾ 함수를 호출한다 : 함수를 사용하는 것

   ◾ 스택(stack) : 메모리 공간
   ◾ 지역 변수 : 함수 내부에서만 사용하는 변수

📌 main() 함수 : 자바 가상 머신(JVM)이 프로그램을 시작하기 위해 호출하는 함수

📌 new 예약어로 클래스 생성
   ◾ 클래스형 변수 이름 = new 생성자;

   ◾ 인스턴스 : 실제로 사용할 수 있도록 생성된 클래스
   ◾ 참조변수 : 인스턴스를 가리키는 클래스형 변수 (도트(.) 연산자를 사용)
	참조 변수.멤버 변수
	참조 변수.메서드

📌 생성자 : 클래스를 처음 만들 때 멤버 변수나 상수를 초기화
   ◾ 디폴트 생성자 : 자동으로 만들어 주는 생성자

   ◾ 생성자 오버로드 : 클래스에 생성자가 두 개 이상 제공되는 경우

📌 참조 자료형 변수 : 클래스 자료형으로 선언

📌 접근 제어자 : 예약어를 사용해 클래스 내부 변수나 메서드, 생성자에 대한 접근 권한을 지정
   ◾ public : 외부 클래스에서 접근이 가능하며 외부 클래스가 사용할 수 있음
   ◾ private : 외부 클래스에서 사용할 수 없음

📌 get( ), set( ) 메서드 : 다른 변수에 접근할 수 있도록 함

자바 프로그래밍 정리 노트[2022.01.11] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 this 예약어 : 생성된 인스턴스 자신을 가리킴
   ◾ 생성된 클래스 자신의 주소 값을 반환

📌 static 변수 : 클래스에서 공통으로 사용하는 변수
   ◾ 정적(클래스) 변수 - 클래스 내부에 선언
	static int serialNum;

   ◾ 지역변수 - 메서드가 호출될 때 메모리에 생성되어 메서드가 끝나면 사라짐

📌 변수   
   ◾ 지역 (로컬) 변수	- 함수 내부에 선언				- 스택 메모리
   ◾ 멤버 (인스턴스) 변수	- 클래스 멤버 변수로 선언			- 힙 메모리
   ◾ static (클래스) 변수	- static 예약어를 사용해 클래스 내부에 선언	- 데이터 영역 메모리

📌 배열 : 자료형이 같은 자료 여러 개를 한 번에 관리 할 수 있음
	자료형[ ]   배열 이름 = new   자료형[개수];
	자료형   배열 이름[ ] = new   자료형[개수];

   ◾ 배열 초기화 : 배열을 선언하면서 동시에 각 요소의 값이 초기화됨
   ◾ 인덱스 연산자 [ ] : 배열을 처음 선언할 때 사용한 연산자
   ◾ length 속성 : 배열 길이를 나타냄

📌 향상된 for문 : 배열의 처음에서 끝까지 모든 요소를 참조할 때 사용
	for(변수 : 배열) {
	   반복 실행문;
	}

📌 다차원 배열 : 이차원 이상으로 구현한 배열, 평면이나 공간
	int [ ][ ] arr = new int [2][3];

📌 ArrayList 클래스 : 객체 배열을 관리할 수 있는 멤버 변수와 메서드를 제공
   ◾ boolean add(E e)	- 요소 하나를 배열에 추가
   ◾ int size( )		- 배열에 추가된 요소 전체 개수를 반환
   ◾ E get(int index)		- 배열 index 위치에 있는 요소 값을 반환
   ◾ E remove(int index)	- 배열 index 위치에 있는 요소 값을 제거하고 그 값을 반환
   ◾ boolean isEmpty( )	- 배열이 비어 있는지 확인

📌 임포트(import) : 클래스를 가져와 사용할 때 이 클래스가 어디에 구현되어 있다고 알려주기 위해 코드 맨 위에 선언함

📌 size( ) 메서드 : 배열에 유효한 값이 저장된 요소 개수를 반환

자바 프로그래밍 정리 노트[2022.01.12] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 상속 : 부모가 자식에게 물려주는 재산
   ◾ 부모 클래스 (parent class) - 상위 클래스
   ◾ 자식 클래스 (child class)	- 하위 클래스

   ◾ extends 예약어 : 상속 구현, A가 가지고 있는 속성이나 기능을 추가로 확장해 B클래스를 구현
	class B extends A {
	}

   ◾ 하위 클래스가 생성될 때는 상위 클래스의 생성자가 먼저 호출됨

   ◾ super 예약어 : 하위 클래스에서 상위 클래스로 접근, 하위 클래스는 상위 클래스의 주소(참조 값)을 알고 있음
   ◾ 디폴트 생성자가 아닌 매개변수가 있는 생성자를 직접 구현
   ◾ 하위 클래스의 인스턴스가 상위 클래스로 형 변환되는 과정이 묵시적으로 이루어짐

   ◾ 메서드 오버라이딩(method overriding) : 상위 클래스에 정의한 메서드가 하위 클래스에서 구현할 내용과 맞지 않을 경우에 하위 클래스에서 이 메서드를 재정의
	오버라이딩을 하려면 반환형, 메서드 이름, 매개 변수 개수, 매개변수 자료형이 반드시 같아야 함

   ◾ @Override 애노테이션 : '이 메서드는 재정의된 메서드입니다'라고 컴파일러에 명확히 알려줌

📌 private : 필요에 따라 멤버 변수나 메서드를 외부에 노출하지 않음

📌 protected : 상위 클래스에 작성한 변수나 메서드 중 외부 클래스에서 사용할 수 없지만 하위 클래스에선 사용할 수 있도록 지정함
  
📌 다형성 : 하나의 코드가 여러 자료형으로 구현되어 실행됨, 추상 클래스, 인터페이스에서 구현

자바 프로그래밍 정리 노트[2022.01.13] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 추상 클래스 : 추상 메서드를 항상 포함하며 함수의 구현 코드가 없다는 것
   ◾ 추상 메서드 (abstract method) - 함수 몸체(body)가 없다
   ◾ 추상 함수 (abstract function) - { } 함수 몸체가 없는 함수
   ◾ abstract 예약어를 사용하며 { } 대신 ; 를 씀	← 선언만 하는 메서드

   ◾ 추상 클래스는 인스턴스로 생성할 수 없다
	구현된 메서드 - 하위 클래스에서 공통으로 사용할 구현 코드 (하위 클래스에서 재정의 할 수 있음)
	추상 메서드 - 하위 클래스가 어떤 클래스냐에 따라 구현 코드가 달라짐

📌 템플릿 메서드 : 디자인 패턴의 한 방법으로 모든 객체 지향 프로그램에서 사용하는 구현 방법

📌 final 예약어 : 마지막으로 정한 것으로 더 이상 수정 할 수 없음
   ◾ final 변수 - 상수를 의미함	
   ◾ final 메서드 - 하위 클래스에서 재정의 할 수 없음
   ◾ final 클래스 - 상속할 수 없음

📌 인터페이스(interface) : 클래스 혹은 프로그램이 제공하는 기능을 명시적으로 선언함
   ◾ 추상 메서드와 상수로만 이루어짐
   ◾ 인스턴스를 생성할 수 없음

   ◾ implements : 클래스에서 인터페이스를 구현함

   ◾ 인터페이스에 선언한 변수를 컴파일 하면 상수로 변환 됨
   ◾ 형 상속 - 인터페이스 간에도 상속이 가능함

📌 디폴트 메서드 : 기본으로 제공되는 메서드

📌 정적 메서드 : static 예약어를 사용하여 선언해 클래스 생성과 무관하게 사용함

📌 private 메서드 : 인터페이스를 구현한 클래스에서 사용하거나 재정의 할 수 없음

자바 프로그래밍 정리 노트[2022.01.14] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 java.lang 패키지 : 기본적으로 많이 사용하는 클래스들이 포함됨

📌 Object 클래스 : 모든 자바 클래스의 최상위 클래스 (모든 클래스는 Object 클래스로부터 상속을 받음)
   ◾ String toString() 메서드		- 객체를 문자열로 표현하여 반환
   ◾ boolean equals(Object obj) 메서드	- 두 인스턴스가 동일한지 여부를 반환
   ◾ int hashCode() 메서드		- 객체의 해시 코드 값을 반환
   ◾ Object clone() 메서드		- 객체를 복제하여 동일한 멤버 변수 값을 가진 새로운 인스턴스를 생성
   ◾ Class getClass() 메서드		- 객체의 Class 클래스를 반환
   ◾ void finalize() 메서드		- 인스턴스가 힙 메모리에서 제거될 때 가비지 컬렉터(GC)에 의해 호출되는 메서드
   ◾ void wait() 메서드		- 멀티스레드 프로그램에서 사용하는 메서드
   ◾ void notify() 메서드		- wait() 메서드에 의해 기다리고 있는 스레드를 실행 가능한 상태로 가져옴

📌 toString() 메서드 : 객체 정보를 문자열(String)로 바꿈
   ◾ Object 클래스의 toString() 메서드
	object.Book@16f65612		// 클래스 이름@해시 코드 값
   ◾ String 클래스의 toString() 메서드
	String str = new String("test");
	System.out.printIn(str);		// test 출력됨
   ◾ Integer 클래스의 toString() 메서드
	Integer i1 = new Integer(100);
	System.out.printIn(i1);		// 100 출력됨

📌 equals() 메서드 : 두 인스턴스의 주소 값을 비교하여 boolean 값(true/false)을 반환해 줌

📌 hashCode() 메서드
   ◾ 해시(hash) : 정보를 저장하거나 검색할 때 사용하는 자료 구조
   ◾ 해시 함수 : 객체의 특정 정보를 매개변수 값으로 넣으면 그 객체가 저장되어야 할 위치나 저장된 해시 테이블 주소(위치)를 반환함
	hashCode = hash(key);		// 객체의 해시 코드 값(메모리 위치 값)이 반환됨

📌 Clone() 메서드 : 기본 틀(prototype)의 복사본을 사용해 동일한 인스턴스를 만들어 복잡한 생성 과정을 간단히 함
	protected Object clone();

📌 String 클래스 : 문자열 사용
   ◾ 상수 풀(constant pool) : 상수 값을 저장하는 공간

📌 Wrapper 클래스 : 클래스를 기본 자료형으로 감쌈
   ◾ 	기본형		         Wrapper 클래스
	boolean			Boolean
	byte			Byte
	char			Character
	short			Short
	int			Integer
	long			Long
	float			Float
	double			Double

자바 프로그래밍 정리 노트[2022.01.17] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 제네릭 : 어떤 값이 여러 참조 자료형을 사용할 수 있도록 함
   ◾ 여러 참조 자료형이 쓰일 수 있는 곳에 특정한 자료형을 지정하지 않고 클래스나 메서드를 정의한 후 사용하는 시점에 어떤 자료형을 사용할 것인지 지정함

   ◾ 제네릭 클래스 정의
	public class GenericPrinter<T> {	// 제네릭 클래스
	
	}
   ◾ 다이아 몬드 연산자 < >
	ArrayList<String> list = new ArrayList< >( );

   ◾ 자료형 매개변수 T 와 static
	static 변수나 메서드는 인스턴스를 생성하지 않아도 클래스 이름으로 호출이 가능함

   ◾ T extends 클래스 : 제네릭 클래스에서 T자료형에 사용할 자료형에 제한을 둠

   ◾ 제네릭 메서드
	public <자료형 매개변수> 반환형 메서드 이름(자료형 매개변수) { }

📌 컬렉션 프레임 워크 : 필요한 자료 구조를 미리 구현하여 java.util 패키지에서 제공함
   ◾ Collection 인터페이스
         ① List 인터페이스 : 순서가 있는 자료 관리, 중복 허용			(ArrayList, Vectior, LinkedList, Stack, Queue)
         ② Set 인터페이스 : 순서가 정해져 있지 않음, 중복을 허용하지 않음	(HashSet, TressSet)
   ◾ Collection 인터페이스에 선언된 메서드
	boolean add(E e)		: Collection에 객체를 추가
	void clear( )		: Collection의 모든 객체를 제거
	lterator(E) iterator		: Collection을 순환할 반복자(Iterator)를 반환함
	boolean remove(Object o)	: Collection에 매개변수에 해당하는 인스턴스가 존재하면 제거
	int size( )			: Collection에 있는 요소의 개수를 반환

   ◾ Map 인터페이스 : 쌍으로 되어 있는 자료를 관리하는 메서드들이 선언되어 있음, 키-값(Key-Value) 쌍으로 구성되며 키 값은 중복이 없음 (Hashtable, hashMap, TreeMap)
   ◾ Map 인터페이스에 선언된 메서드
	V put(K key, V value)		   : key에 해당하는 value 값을 map에 넣음
	V get(K key)			   : key에 해당하는 value 값을 반환
	boolean isEmpty( )			   : Map이 비었는지 여부를 반환
	boolean containsKey(Object key)	   : Map에 해당하는 key가 있는지 여부를 반환
	boolean containsValue(Object value)	   : Map에 해당하는 value가 있는지 여부를 반환
	Set keyset( )			   : key 집합을 Set으로 반환(중복 안되므로 Set)
	Collection values( )			   : value를 Collection으로 반환(중복무관)
	V remove(key)			   : key가 있는 경우 삭제
	boolean remove(Object key, Object value) : key가 있는 경우 key에 해당하는 value가 매개변수와 일치할 때 삭제

📌 List 인터페이스 : 객체를 순서에 따라 저장하고 유지하는데 필요한 메서드가 선언되어 있음
   ◾ ArrayList 클래스 : 객체 순서를 기반으로 순차적으로 자료를 관리하는 프로그램을 구현
   ◾ Vector 클래스 : 배열을 구현한 클래스로 동기화를 지원함 ( 두 개 이상의 스레드가 동시에 Vector를 사용할 경우 오류가 나지 않도록 실행 순서를 보장함)
	Collections.synchronizedList(new ArrayList<String>( ));
   ◾ LinkedList 클래스 : 링크드 리스트를 활용해 자료를 삽입, 삭제할 떄 나머지 자료를 이동시켜 빈 공간을 만들지 않고 연속된 자료 구조를 구현함
	💡 링크드 리스트 구조 
	   링크드 리스트의 각 요소는 다음 요소를 가리키는 주소 값을 가짐	
	   물리적인 메모리는 떨어져 있어도 논리적으로는 앞뒤 순서를 가짐
	   링크드 리스트에 세 요소 A,B,D가 순차적으로 저장된 상태에서 C요소를 추가
		링크드 리스트에 요소 추가 : A → B → D
		링크드 리스트에 요소 추가 : A → B → C → D
	💡 ArrayList로 스택과 큐를 구현 
	   LIFO : 맨 나중에 추가된 데이터를 먼저 꺼냄
	   FIFO : 먼저 추가된 데이터부터 꺼내서 사용

📌 Set 인터페이스 : 순서와 상관없이 중복을 허용하지 않음
   ◾ HashSet 클래스 : 집합 자료 구조를 구현하며 중복을 허용하지 않음
   ◾ TreeSet 클래스 : 자료의 중복을 허용하지 않으며 출력 결과 값을 정렬하는 클래스
	이진 검색 트리(BST) : 노드에 저장되는 자료의 중복을 허용하지 않고 부모가 가지는 자식노드의 수가 2개 이하임
   ◾ Comparable 인터페이스 : 자기 자신과 전달받은 매개변수를 비교
   ◾ Comparator 인터페이스 : 두 매개변수를 비교

📌 Map 인터페이스 : 자료를 쌍으로 관리하는데 필요한 메서드가 정의되어 있음
   ◾ HashMap 클래스 : 해시 방식으로 자료를 관리
   ◾ TreeMap 클래스 : 이진 검색 트리로 구현되어 있으며 key값으로 정렬할 수 있음

자바 프로그래밍 정리 노트[2022.01.18] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 내부 클래스 (inner class) : 클래스 내부에 선언한 클래스
	class Out {	// 외부 클래스
	   class In {	// 내부 클래스

	   }
	}

   ◾ 인스턴스 내부 클래스 (instance inner class) : 인스턴스 변수를 선언할 때와 같은 위치에 선언하며 외부 클래스 내부에서만 생성하여 사용하는 객체를 선언
   ◾ 정적(static) 내부 클래스 (static inner class) : 외부 클래스의 멤버 변수와 같은 위치에 정의하며 static 예약어를 함께 사용
	일반 메서드 (void in Test()) 
		외부 클래스의 인스턴스 변수(num)		사용 불가 (X)
		외부 클래스의 정적 변수(sNum)		사용 가능 (O)
		정적 내부 클래스의 인스턴스 변수(inNum)	사용 가능 (O)
		정적 내부 클래스의 정적 변수(sInNum)		사용 가능 (O)

	정적 메서드 (static void sTest()
		외부 클래스의 인스턴스 변수(num)		사용 불가 (X)
		외부 클래스의 정적 변수(sNum)		사용 가능 (O)
		정적 내부 클래스의 인스턴스 변수(inNum)	사용 불가 (X)
		정적 내부 클래스의 정적 변수(sInNum)		사용 가능 (O)
   ◾ 지역(local) 내부 클래스 : 지역 변수처럼 메서드 내부에 클래스를 정의하여 사용, 메서드 안에서만 사용 가능함
   ◾ 익명(anonymous) 내부 클래스 : 클래스 이름을 사용하지 않는 클래스, 단 하나의 인터페이스 또는 단 하나의 추상 클래스를 바로 생성할 수 있음

📌 내부 클래스 정리
			[구현위치]				[사용할 수 있는 외부 클래스 변수]	[생성방법]
   ◾ 인스턴스 내부 클래스	외부 클래스 멤버 변수와 동일			외부 인스턴스 변수, 외부 전역 변수	외부 클래스를 먼저 만든 후 내부 클래스 생성
   ◾ 정적 내부 클래스	외부 클래스 멤버 변수와 동일			외부 전역변수			외부 클래스와 무관하게 생성
   ◾ 지역 내부 클래스	메서드 내부에 구현				외부 인스턴스 변수, 외부 전역 변수	메서드를 호출할 때 생성
   ◾ 익명 내부 클래스	메서드 내부에 구현, 변수에 대입하여 직접 구현	외부 인스턴스 변수, 외부 전역 변수	메서드를 호출할 때 생성되거나 인터페이스 타입 변수에 대입할 때 new 예약어를 사용해 생성

📌 함수형 프로그래밍(Fucntional Programming: FP) : 함수의 구현과 호출만으로 프로그램을 만들 수 있는 프로그래밍

📌 람다식(Lambda expression) : 자바에서 제공하는 함수형 프로그래밍 방식, 함수 이름이 없는 익명 함수를 만듬
	(매개변수) -> {실행문;}

📌 함수형 인터페이스
   ◾ @Functionallnterface 애노테이션 : 람다식으로 구현한 인터페이스에 실수로 다른 메서드를 추가하는 것을 막기 위해 사용

📌 스트림(stream) : 여러 자료의 처리에 대한 기능을 구현해 놓은 클래스, 자료를 추상화함
   ◾ 스트림 연산
	중간 연산 - filter(), map()
	최종 연산 - forEach(), count(), sum(), reduce()
   ◾ Stream<E> stream() 메서드 : 스트림 클래스를 반환함
   ◾ 스트림 특징
	1. 자료의 대상과 관계없이 동일한 연산을 수행함
	2. 한 번 생성하고 사용한 스트림은 재사용 할 수 없음
	3. 스트림의 연산은 기존 자료를 변경하지 않음
	4. 스트림의 연산은 중간 연산과 최종 연산이 있음

📌 오류(error)
   ◾ 컴파일 오류(compile error) : 프로그램 코드 작성 중 실수로 발생하는 오류 
   ◾ 실행 오류(runtime error) : 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지 되는 오류

   ◾ 로그(log) 분석 : 로그 파일을 활용해 오류 원인을 찾을 수 있고 예외 상황을 파악하고 버그를 수정할 수 있음

   ◾ 예외(exception) : 프로그램에서 제어 가능
   ◾ 시스템 오류(error) :  사용 가능한 동적 메모리가 없는 경우, 스택의 메모리의 오버플로우가 발생한 경우 등

📌 예외 클래스(Exception 클래스)
   ◾ 입출력 예외 처리(IOException)
   ◾ 실행 오류 예외 처리(RuntimeException)

📌 예외 처리
   ◾ try-catch문
	try {
	   예외가 발생할 수 있는 코드 부분
	} catch(처리할 예외 타입 e) {
	   try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
	}

   ◾ try-catch-finally문
	try {
	   예외가 발생할 수 있는 코드 부분
	} catch(처리할 예외 타입 e) {
	   예외를 처리하는 부분
	} finally {
	   항상 수행되는 부분
	}

   ◾ try-with-resources문 : close() 메서드를 명시적으로 호출하지 않아도 try 블록 내에서 열린 리소스를 자동으로 닫도록 만듬, AutoCloseable 인터페이스를 구현해야 함
	try (A a = new A( ); B b = new B( )) {
	
	} catch(Exception e) {
	
	}

📌 예외 처리 미루기
   ◾ throws : 예외를 해당 메서드에서 처리하지 않고 미룬 후 메서드를 호출해 사용하는 부분에서 예외를 처리하는 방법

📌 스트림(stream) : 흐름, 일련의 연속성을 가짐
   ◾ 입력 스트림	- FileInputStream, FileReader, BufferedInputStream, BufferedReader 등
   ◾ 출력 스트림	- FileOutputStream, FileWriter, BufferedOutputStream, BufferedWriter 등

   ◾ 바이트 스트림	- FileInputStream, FileOutputStream, BufferedInputStream, BufferedOutputStream 등
   ◾ 문자 스트림	- FileReader, FileWriter, BufferedReader, BufferedWriter 등

   ◾ 기반 스트림	- FileInputStream, FileOutputStream, FileReader, FileWriter 등
   ◾ 보조 스트림	- InputStreamReader, OutputStreamWriter, BufferedInputStream, BufferedOutputStream 등 

📌 표준 입출력 : 콘솔 화면에 입출력됨
	자료형		변수 이름		설명
   ◾ static PrintStream	out		표준 출력 스트림
   ◾ static InputStream	in		표준 입력 스트림
   ◾ static OutputStream	err		표준 오류 출력 스트림

   ◾ System.in : 문자를 입력받음

📌 Scanner 클래스 : java.util 패키지에 있는 입력 클래스
   ◾ Scanner(File source)		- 파일을 매개변수로 받아 Scanner를 생성
   ◾ Scanner(InputStream source)	- 바이트 스트림을 매개변수로 받아 Scanner를 생성
   ◾ Scanner(String source)		- String을 매개변수로 받아 Scanner를 생성

📌 Scanner 클래스에서 제공하는 메서드
   ◾ boolean nextBoolean()	- boolean 자료를 읽음
   ◾ byte nextByte()		- 한 바이트 자료를 읽음
   ◾ short nextShort()	- short 자료를 읽음
   ◾ int nextInt()		- int 자료를 읽음
   ◾ long nextLong()	- long 자료를 읽음
   ◾ float nextFloat()	- float 자료를 읽음
   ◾ double nextDouble()	- double 자료를 읽음
   ◾ String nextLine()	- 문자열 String을 읽음

📌 Console 클래스 : 콘솔 창에서 자료를 입력받거나 콘솔 내용을 읽음
   ◾ String readLine()	- 문자열 읽음
   ◾ char[ ] readPassword()	- 사용자에게 문자열을 보여주지 않고 읽음
   ◾ Reader reader()		- Reader 클래스를 반환함
   ◾ PrintWriter writer()	- PrintWriter 클래스를 반환함

📌 InputStream : 추상 메서드를 포함한 추상 클래스로서 하위 스트림 클래스가 상속받아 각 클래스 역할에 맞게 추상 메서드 기능을 구현함
   ◾ FileInputStream 	- 파일에서 바이트 단위로 자료를 읽음
   ◾ ByteArrayInputStream	- Byte 배열 메모리에서 바이트 단위로 자료를 읽음
   ◾ FilterInputStream	- 기반 스트림에서 자료를 읽을 때 추가 기능을 제공하는 보조 스트림의 상위 클래스

📌 InputStream에서 제공하는 메서드
   ◾ int read()			- 입력 스트림으로부터 한 바이트의 자료를 읽음 (읽은 자료의 바이트 수를 반환함)
   ◾ int read(byte b[ ])		- 입력 스트림으로부터 b[] 크기의 자료를 b[]에 읽음 (읽은 자료의 바이트 수를 반환함)
   ◾ int read(byte b[ ], int off, int len)	- 입력 스트림으로부터 b[] 크기의 자료를 b[]의 off 변수 위치부터 저장하며 len만큼 읽음 (읽은 자료의 바이트 수를 반환함)
   ◾ void close()			- 입력 스트림과 연결된 대상 리소스를 닫음

📌 FileInputStream의 생성자
   ◾ FileInputStream(String name)	- 파일 이름 name을 매개변수로 받아 입력 스트림을 생성 
   ◾ FileInputStream(File f)		- File 클래스 정보를 매개변수로 받아 입력 스트림을 생성

📌 OutputStream 클래스
   ◾ FileOutputStream	- 바이트 단위로 파일에 자료를 씀
   ◾ ByteArrayOutputStream	- Byte 배열에 바이트 단위로 자료를 씀
   ◾ FilterOutputStream	- 기반 클래스에서 자료를 쓸 때 추가 기능을 제공하는 보조 스트림의 상위 클래스

📌 OutputStream에서 제공하는 메서드
   ◾ void write(int b)		- 한 바이트를 출력
   ◾ void write(byte[ ] b)		- b[ ] 배열에 있는 자료를 출력 
   ◾ void write(byte b[ ], int off, int len)	- b[ ] 배열에 있는 자료의 off 위치부터 len 개수만큼 자료를 출력
   ◾ void flush()			- 출력을 위해 잠시 자료가 머무르는 출력 버퍼를 강제로 비워 자료를 출력
   ◾ void close()			- 출력 스트림과 연결된 대상 리소스를 닫음 (출력 버퍼가 비워짐)

📌 FileOutputStream : 파일에 바이트 단위 자료를 출력
   ◾ FileOutputStream(String name)			- 파일 이름 name을 매개변수로 받아 출력 스트림을 생성
   ◾ FileOutputStream(String name, boolean append)	- 파일 이름 name을 매개변수로 받아 입력 스트림을 생성 (디폴트 값 false)
   ◾ FileOutputStream(File f, )				- File 클래스 정보를 매개변수로 받아 출력 스트림을 생성
   ◾ FileOutputStream(Filen f, boolean append)		- File 클래스 정보를 매개변수로 받아 출력 스트림을 생성 (디폴트 값 false)

📌 Reader : 문자 단위로 읽는 스트림 클래스
   ◾ FileReader		- 파일에서 문자 단위로 읽는 스트림 클래스
   ◾ InputStreamReader	- 바이트 단위로 읽은 자료를 문자로 변환해 주는 보조 스트림 클래스
   ◾ BufferedReader	- 문자로 읽을 때 배열을 제공해 한꺼번에 읽을 수 있는 기능을 제공해 주는 보조 스트림

📌 자료를 읽는 메서드
   ◾ int read()			- 파일로부터 한 문자를 읽음 (읽은 값을 반환) 
   ◾ int read(char[ ] buf)		- 파일로부터 buf 배열에 문자를 읽음
   ◾ int read(char[ ] buf,int off, int len)	- 파일로부터 buf 배열의 off 위치에서부터 len 개수만큼 문자를 읽음
   ◾ void close()			- 스트림과 연결된 파일 리소스를 닫음

📌 FileReader 생성자
   ◾ FileReader(String name)	- 파일 이름 name을 매개변수로 받아 입력 스트림을 생성
   ◾ FileReader(File f)	- File 클래스 정보를 매개변수로 받아 입력 스트림을 생성

📌 Writer : 문자 단위로 출력하는 스트림 클래스
   ◾ FileWriter		- 파일에 문자 단위로 출력하는 스트림 클래스
   ◾ OutputStreamWriter	- 파일에 바이트 단위로 출력한 자료를 문자로 변환해 주는 보조 스트림
   ◾ BufferedWriter		- 문자로 쓸 때 배열을 제공해 한꺼번에 쓸 수 있는 기능을 제공해주는 보조 스트림

📌 자료를 읽는 메서드
   ◾ void write(int c)			- 한 문자를 파일에 출력
   ◾ void write(char[ ] buf)			- 문자 배열 buf의 내용을 파일에 출력
   ◾ void write(char[ ] buf, int off, int len)	- 문자 배열 buf의 off 위치에서부터 len 개수의 문자를 파일에 출력
   ◾ void write(String str)			- 문자열 str를 파일에 출력
   ◾ void write(String str, int off, int len)		- 문자열 str의 off번째 문자부터 len 개수만큼 파일에 출력
   ◾ void flush()				- 파일에 출력하기 전에 자료가 있는 공간을 비워 출력
   ◾ void close()				- 파일과 연결된 스트림을 닫음(출력 버퍼도 비워짐)

📌 FileWriter 생성자
   ◾ FileWriter(String name)			- 파일 이름 name을 매개변수로 받아 출력 스트림을 생성
   ◾ FileWriter(String name, boolean append)	- 파일 이름 name을 매개변수로 받아 출력 스트림을 생성
   ◾ FileWriter(File f, )			- File 클래스 정보를 매개변수로 받아 출력 스트림을 생성
   ◾ FileWriter(File f, boolean append)		- File 클래스 정보를 매개변수로 받아 출력 스트림을 생성 (기본 값은 false)

자바 프로그래밍 정리 노트[2022.01.19] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

📌 보조 스트림 : 보조 기능을 추가하는 스트림(입출력 대상이 되는 파일이나 네트워크에 직접 쓰거나 읽는 기능이 없음)
   ◾ FilterInputStream	- 생성자의 매개변수로 InputStream을 받음
   ◾ FilterOutputStream	- 생성자의 매개변수로 OutputStream을 받음

   ◾ InputStreamReader(InputStream in)				- InputStream 클래스를 생성자의 매개변수로 받아 Reader를 생성
   ◾ InputStreamReader(InputStream in, Charset cs)		- InputStream과 Charset 클래스를 매개변수로 받아 Reader를 생성
   ◾ InputStreamReader(InputStream in, CharsetDecoder dec)	- InputStream과 CharsetDecoder를 매개변수로 받아 Reader를 생성
   ◾ InputStreamReader(InputStream in, String charsetName)		- InputStream과 String으로 문자 세트 이름을 받아 Reader를 생성

📌 Buffered 스트림 : 버퍼링 기능을 제공하는 스트림 클래스
   ◾ BufferedInputStream	- 바이트 단위로 읽는 스트림에 버퍼링 기능을 제공
   ◾ BufferedOutputStream	- 바이트 단위로 출력하는 스트림에 버퍼링 기능을 제공
   ◾ BufferedReader	- 문자 단위로 읽는 스트림에 버퍼링 기능을 제공
   ◾ BufferedWriter		- 문자 단위로 출력하는 스트림에 버퍼링 기능을 제공

   ◾ BufferedInputStream(InputStream in)	- InputStream 클래스를 생성자의 매개변수로 받아 BufferedInputStream을 생성
   ◾ BufferedInputStream(InputStream in, int size)	- InputStream 클래스와 버퍼 크기를 생성자의 매개변수로 받아 BufferedInputStream을 생성

📌 DataInputStream 
   ◾ DataInputStream - InputStream을 생성자의 매개변수로 받아 DataInputStream을 생성

   ◾ byte readByte()		- 1바이트를 읽어 반환함
   ◾ boolean readBoolean()	- 읽은 자료가 0이 아니면 true를 0이면 false를 반환함
   ◾ char readChar()		- 한 문자를 읽어 반환함
   ◾ short readShort()	- 2바이트를 읽어 정수 값을 반환함
   ◾ int readInt()		- 4바이트를 읽어 정수 값을 반환함
   ◾ long readLong()	- 8바이트를 읽어 정수 값을 반환함
   ◾ float readFloat()	- 4바이트를 읽어 실수 값을 반환함
   ◾ double readDouble()	- 8바이트를 읽어 실수 값을 반환함
   ◾ String readUTF()	- 수정된 UTF-8 인코딩 기반으로 문자열을 읽어 반환함

📌 DataOutputStream
   ◾ DataOutputStream - OutputStream을 생성자의 매개변수로 받아 DataOutputStream을 생성

   ◾ void writeByte(int v)		- 1바이트의 자료를 출력
   ◾ void writeBoolean(boolean v)	- 1바이트 값을 출력
   ◾ void writeChar(int v)		- 2바이트를 출력
   ◾ void writeShort(int v)		- 2바이트를 출력
   ◾ void writeInt(int v)		- 4바이트를 출력
   ◾ void writeLong(long v)		- 8바이트를 출력
   ◾ void writeFloat(float v)		- 4바이트를 출력
   ◾ void writeDouble(double v)	- 8바이트를 출력
   ◾ void writeUTF(String str)		- 수정된 UTF-8 인코딩 기반으로 문자열을 출력

📌 직렬화
   ◾ 직렬화(serialization) : 저장하거나 네트워크를 통해 전송
   ◾ 역직렬화(deserialization) : 저장된 내용이나 전송받은 내용을 다시 복원

   ◾ ObjectInputStream(InputStream in)		- InputStream을 생성자의 매개변수로 받아 ObjectInputStream을 생성
   ◾ ObjectOutputStream(OutputStream in)	- (OutputStream을 생성자의 매개변수로 받아 ObjectOutputStream을 생성

📌 File 클래스 : 파일이라는 개념을 추상화한 클래스
   ◾ File(String pathname) - pathname을 매개변수로 받아 파일을 생성

📌 RandomAccessFile 클래스 : 파일 입출력을 동시에 할 수 있는 클래스
   ◾ RandomAccessFile(File file, String mode)	- 입출력을 할 File과 입출력 mode를 매개변수로 받음
   ◾ RandomAccessFile(String file, String mode)	- 입출력을 할 파일 이름을 문자열로 받고 입출력 mode를 매개변수로 받음